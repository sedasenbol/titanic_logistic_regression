# -*- coding: utf-8 -*-
"""
Created on Wed Oct 21 19:06:17 2020

@author: ssenb
"""
import warnings
warnings.filterwarnings('ignore')

os.chdir(r"C:\\Users\ssenb\Desktop\titanic")
train = pd.read_csv('train.csv')
test = pd.read_csv('test.csv')

train['Age'].mean()

train.loc[train['PassengerId'] == 631, 'Age'] = 48

train.loc[train['PassengerId'] == 69, ['SibSp', 'Parch']] = [0,0]
test.loc[test['PassengerId'] == 1106, ['SibSp', 'Parch']] = [0,0]

df = pd.concat((train.loc[:,'Pclass':'Embarked'], test.loc[:,'Pclass':'Embarked'])).reset_index(drop=True)

df['Title'] = df.Name.str.extract(' ([A-Za-z]+)\.', expand=False)

df['Title'] = df['Title'].replace(['Lady', 'Countess','Capt', 'Col', 'Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')

df['Title'] = df['Title'].replace('Mlle', 'Miss')
df['Title'] = df['Title'].replace('Ms', 'Miss')
df['Title'] = df['Title'].replace('Mme', 'Mrs')
title_mapping = {"Mr": 1, "Miss": 2, "Mrs": 3, "Master": 4, "Rare": 5}
df['Title'] = df['Title'].map(title_mapping)
df['Title'] = df['Title'].fillna(0)

df = df.drop(['Name'], axis=1)

df["Sex"][df["Sex"] == "male"] = 0
df["Sex"][df["Sex"] == "female"] = 1
df["Sex"] = df["Sex"].astype(int)

df['Age'] = df.groupby(['Pclass'])['Age'].transform(lambda x: x.fillna(x.median()))

df["Age"] = df["Age"].astype(int)


# Ticket tuning
tickets = []
for i in list(df.Ticket):
    if not i.isdigit():
        tickets.append(i.replace(".","").replace("/","").strip().split(" ")[0])
    else:
        tickets.append("x")
df["Ticket"] = tickets
#df['Ticket_Frequency'] = df.groupby('Ticket')['Ticket'].transform('count')
df = pd.get_dummies(df, columns= ["Ticket"], prefix = "T")

df['Fare'] = df.groupby("Pclass")['Fare'].transform(lambda x: x.fillna(x.median())) 
df['Zero_Fare'] = df['Fare'].map(lambda x: 1 if x == 0 else (0))
def fare_category(fr): 
    if fr <= 7.91:
        return 1
    elif fr <= 14.454 and fr > 7.91:
        return 2
    elif fr <= 31 and fr > 14.454:
        return 3
    return 4

df['Fare_cat'] = df['Fare'].apply(fare_category)

# Replace missing values with 'U' for Cabin
df['Cabin'] = df['Cabin'].fillna('U')
import re
# Extract first letter
df['Cabin'] = df['Cabin'].map(lambda x: re.compile("([a-zA-Z]+)").search(x).group())
cabin_category = {'A':9, 'B':8, 'C':7, 'D':6, 'E':5, 'F':4, 'G':3, 'T':2, 'U':1}
# Mapping 'Cabin' to group
df['Cabin'] = df['Cabin'].map(cabin_category)

df["Embarked"] = df["Embarked"].fillna("S")
df["Embarked"][df["Embarked"] == "S"] = 1
df["Embarked"][df["Embarked"] == "C"] = 2
df["Embarked"][df["Embarked"] == "Q"] = 3
df["Embarked"] = df["Embarked"].astype(int)

# New 'familySize' feature & dripping 2 features:
df['FamilySize'] = df['SibSp'] + df['Parch'] + 1

df['SmallF'] = df['FamilySize'].map(lambda s: 1 if  s == 2  else 0)
df['MedF']   = df['FamilySize'].map(lambda s: 1 if 3 <= s <= 4 else 0)
df['LargeF'] = df['FamilySize'].map(lambda s: 1 if s >= 5 else 0)

df['Senior'] = df['Age'].map(lambda s:1 if s>70 else 0)

X_train = df[:train.shape[0]]
X_test_fin = df[train.shape[0]:]
y = train.Survived
X_train['Survived'] = y
df = X_train

colsToRemove = []
for col in df.columns:
    if df[col].std() == 0.00: 
        colsToRemove.append(col)
        
df.drop(colsToRemove, axis=1, inplace=True)
X_test_fin.drop(colsToRemove, axis=1, inplace=True)
print("Removed `{}` Constant Columns\n".format(len(colsToRemove)))
print(colsToRemove)


import xgboost as xgb
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from imblearn.over_sampling import RandomOverSampler as ros

X = df.drop('Survived', axis=1)
y = df.Survived

x_train, x_valid, y_train, y_valid = train_test_split(X, y, test_size=0.2, random_state=12)
#x_train, y_train= ros.fit_resample(x_train, y_train)


from sklearn.linear_model import LogisticRegression
model1 = LogisticRegression()
model1.fit(x_train,y_train)

print('The training score for logistic regression is:',(model1.score(x_train,y_train)*100),'%')
print('Validation accuracy', accuracy_score(y_valid, model1.predict(x_valid)))


submit=model1.predict(X_test_fin)

submission = pd.DataFrame()
submission['PassengerId'] = [i for i in range(892, 1310)]
submission['Survived'] = submit
submission
submission.to_csv('./submission4.csv', index=False)
